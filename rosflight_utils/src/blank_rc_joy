#!/usr/bin/python

import rospy, subprocess
from rosflight_msgs.msg import RCRaw

# ENUMS
HIGH = 2000
MED  = 1500
LOW  = 1000
RC_THR_CHN = 2
RC_OVD_CHN = 4
RC_ARM_CHN = 5

if __name__ == '__main__':

    # initialize
    rospy.init_node('rc_joy')
    rc_pub = rospy.Publisher('RC', RCRaw, queue_size=10)
    rospy.loginfo("Using blank RC config")

    # calibrate IMU

    # main loop
    update_freq = 50 # Hz
    BASE_SECS = 5
    calibrate_count = BASE_SECS * update_freq
    switch_count = (BASE_SECS + 2) * update_freq
    throttle_count = (BASE_SECS + 3) * update_freq

    rate = rospy.Rate(update_freq)

    msg = RCRaw()
    # Values should range from 1000 - 2000
    msg.values[0] = MED
    msg.values[1] = MED
    msg.values[RC_THR_CHN] = LOW
    msg.values[3] = MED
    msg.values[RC_OVD_CHN] = HIGH
    msg.values[RC_ARM_CHN] = LOW
    msg.values[6] = MED
    msg.values[7] = MED

    loop_counter = 0

    while not rospy.is_shutdown():
        msg.header.stamp = rospy.Time.now()
        rc_pub.publish(msg)
        rate.sleep()

        if loop_counter < calibrate_count:
            loop_counter += 1
        elif loop_counter == calibrate_count:
            rospy.loginfo('ATTEMPTING TO CALIBRATE IMU')
            subprocess.call(['rosservice','call','/calibrate_imu'])
            loop_counter += 1
        elif loop_counter > calibrate_count and loop_counter < switch_count:
            loop_counter += 1
        elif loop_counter == switch_count:
            rospy.loginfo('SETTING ARM AND OVERRIDE CHANNELS TO HIGH')
            msg.values[RC_ARM_CHN] = HIGH
            msg.values[RC_OVD_CHN] = LOW
            loop_counter += 1
        elif loop_counter > switch_count and loop_counter < throttle_count:
            loop_counter += 1
        elif loop_counter == throttle_count:
            rospy.loginfo('SETTING THROTTLE HIGH')
            msg.values[RC_THR_CHN] = HIGH
            loop_counter += 1
